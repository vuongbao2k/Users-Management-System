import axios from "axios";

const axiosInstance = axios.create({
  baseURL: "http://localhost:1010",
});

// Tr·∫°ng th√°i refresh token
let isRefreshing = false;
let refreshSubscribers = [];

// Khi refresh xong, ti·∫øp t·ª•c c√°c request ƒëang ch·ªù
const onRefreshed = (newToken) => {
  refreshSubscribers.forEach((callback) => callback(newToken));
  refreshSubscribers = [];
};

// H√†m logout
const handleLogout = () => {
  console.warn("üö™ Logging out user...");
  localStorage.removeItem("token");
  localStorage.removeItem("refreshToken");
  localStorage.removeItem("role");
  window.dispatchEvent(new Event("storage"));
  window.location.href = "/login"; // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang login
};

// Interceptor th√™m token v√†o request
axiosInstance.interceptors.request.use(
  async (config) => {
    let token = localStorage.getItem("token");
    const refreshToken = localStorage.getItem("refreshToken");

    // Ki·ªÉm tra n·∫øu token ƒë√£ h·∫øt h·∫°n tr∆∞·ªõc khi g·ª≠i request
    if (token) {
      const tokenPayload = JSON.parse(atob(token.split(".")[1])); // Gi·∫£i m√£ JWT
      const now = Date.now() / 1000; // Th·ªùi gian hi·ªán t·∫°i (gi√¢y)

      if (tokenPayload.exp < now) {
        console.log("‚è≥ Token ƒë√£ h·∫øt h·∫°n, c·∫ßn refresh tr∆∞·ªõc khi g·ª≠i request...");

        if (!isRefreshing) {
          isRefreshing = true;
          try {
            const refreshResponse = await axios.post("http://localhost:1010/auth/refresh", { token: refreshToken });

            if (refreshResponse.data.token) {
              console.log("‚úÖ Nh·∫≠n token m·ªõi tr∆∞·ªõc khi request:", refreshResponse.data.token);
              localStorage.setItem("token", refreshResponse.data.token);
              token = refreshResponse.data.token;
              onRefreshed(token); // Th√¥ng b√°o cho c√°c request ƒëang ch·ªù
            } else {
              console.error("‚ùå Kh√¥ng th·ªÉ refresh token, c·∫ßn ƒëƒÉng nh·∫≠p l·∫°i.");
              handleLogout();
              return Promise.reject(new Error("Token refresh failed"));
            }
          } catch (refreshError) {
            console.error("‚ùå Refresh token th·∫•t b·∫°i:", refreshError);
            handleLogout();
            return Promise.reject(refreshError);
          } finally {
            isRefreshing = false;
          }
        } else {
          // N·∫øu ƒëang refresh, ch·ªù token m·ªõi
          return new Promise((resolve) => {
            refreshSubscribers.push((newToken) => {
              config.headers["Authorization"] = `Bearer ${newToken}`;
              resolve(config);
            });
          });
        }
      }
    }

    if (token) {
      console.log("üîç G·ª≠i request v·ªõi token:", token);
      config.headers["Authorization"] = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// Interceptor x·ª≠ l√Ω l·ªói 403 (token h·∫øt h·∫°n)
axiosInstance.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;

    if (error.response && error.response.status === 403 && !originalRequest._retry) {
      console.log("üîÑ Access token h·∫øt h·∫°n, ƒëang refresh...");
      originalRequest._retry = true;

      try {
        const refreshToken = localStorage.getItem("refreshToken");

        if (!refreshToken) {
          console.error("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y refresh token!");
          handleLogout();
          return Promise.reject(error);
        }

        const refreshResponse = await axios.post("http://localhost:1010/auth/refresh", {
          token: refreshToken,
        });

        console.log("‚úÖ Nh·∫≠n token m·ªõi sau l·ªói 403:", refreshResponse.data.token);

        localStorage.setItem("token", refreshResponse.data.token);

        // G√°n token m·ªõi v√†o request c≈© v√† g·ª≠i l·∫°i
        originalRequest.headers["Authorization"] = `Bearer ${refreshResponse.data.token}`;
        return axiosInstance(originalRequest);
      } catch (refreshError) {
        console.error("‚ùå Refresh token th·∫•t b·∫°i:", refreshError);
        handleLogout();
        return Promise.reject(refreshError);
      }
    }

    return Promise.reject(error);
  }
);

export default axiosInstance;
